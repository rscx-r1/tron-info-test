x-postgres-base: &postgres-base
  image: postgres:16-alpine
  restart: always
  healthcheck:
    test:
      - CMD-SHELL
      - pg_isready -U postgres
    interval: 10s
    timeout: 5s
    retries: 5

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "${APP_PORT}:8000"
    env_file: .env
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
      - ENV=${ENV}
    depends_on:
      db:
        condition: service_healthy
    command: bash -c ". .venv/bin/activate && alembic upgrade heads && uvicorn src.main:app --reload --host 0.0.0.0 --port 8000"

  db:
    <<: *postgres-base
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  postgres-worker-test:
    profiles: ["test"]
    <<: *postgres-base
    env_file: .env.test
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=test
    networks:
      - test

  app-test:
    profiles: ["test"]
    build:
      context: ./
      args:
        ENV: test
    command: sh -c "
      alembic upgrade heads &&
      pytest \
      -n 2 \
      --dist loadscope \
      -s -r A \
      --rootdir=/app/ \
      --disable-pytest-warnings"
    env_file: .env.test
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres-worker-test:5432/test
    volumes:
      - ./:/app
      - /app/.venv
    depends_on:
      postgres-worker-test:
        condition: service_healthy
    networks:
      - test

volumes:
  postgres_data:

networks:
  test:
    name: test-network
